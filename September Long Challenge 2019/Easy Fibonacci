/*
The Fibonacci sequence F0,F1,… is a special infinite sequence of non-negative integers, where F0=0, F1=1
and for each integer n≥2, Fn=Fn−1+Fn−2.

Consider the sequence D of the last decimal digits of the first N Fibonacci numbers, 
i.e. D=(F0%10,F1%10,…,FN−1%10). Now, you should perform the following process:

Let D=(D1,D2,…,Dl).
If l=1, the process ends.
Create a new sequence E=(D2,D4,…,D2⌊l/2⌋). In other words, E is the sequence created by removing all odd-indexed elements from D.
Change D to E.
When this process terminates, the sequence D contains only one number. You have to find this number.

Example Input
1
9

Example Output
3

Explanation

Example case 1: The first N Fibonacci numbers are (0,1,1,2,3,5,8,13,21). The sequence D is (0,1,1,2,3,5,8,3,1)→(1,2,5,3)→(2,3)→(3).

*/

//Code:

#include <iostream>
#include<iterator>
#include<bits/stdc++.h>
#include<map>
#include<string>
#include <boost/multiprecision/cpp_int.hpp> 
using namespace boost::multiprecision;
using namespace std;

int main() {
    
    int128_t t,n,i,j,s,a,b,ans;
   // char c,fib[10000000];
    //string fib;
	/*fib[1]='0';
	fib[2]='1';
	for(i=3;i<=10000000;i++)
	{
	    a=fib[i-1]-'0';
	    b=fib[i-2]-'0';
	    a=(a+b)%10;
	    c=a+'0';
	    fib[i]=c;
	}
	fib[i]='\0';*/
	//cout<<fib[18]<<endl;
	
     cin>>t;
	 while(t--)
	 {
	     cin>>n;
	    if(n==1)
	    {
	        cout<<"0"<<endl;
	    }
	    else if(n<=3)
	    {
	        cout<<"1"<<endl;
	    }
	    else
	    {
	     ans=1;
	     while(ans*2<=n)
	     {
	         
	         ans=ans*2;
	         //cout<<"ans = "<<ans<<endl;
	     }
	     if(ans%10==4)
	     {
	         cout<<"2"<<endl;
	     }
	     else if(ans%10==8)
	     {
	         cout<<"3"<<endl;
	     }
	     else if(ans%10==6)
	     {
	         cout<<"0"<<endl;
	     }
	     else 
	     {
	         cout<<"9"<<endl;
	     }
	    }
	     //cout<<fib[ans]<<endl;
	     
	 }
  //0 1 1 2 3 5 8 3 1 4 5 9 4 3 7 0 
  /*  1 - 0
       2-1
       4 - 2 
       8 - 3
       16 - 0 
       32 - 9
       64 - 2
       128- 3
       256 -0
       512 -9
       1024-2
       2048- 3
       4096- 0 
       8192- 9
       
       */
	return 0;
}
