/*

Chef has a simple undirected graph with N vertices (numbered 1 through N) and M edges. 
He wants to divide it into K parts (subgraphs) for some integer K.

First, Chef divides the vertices in the graph into K sets such that each vertex belongs to exactly one set;
the subgraphs and sets are numbered 1 through K such that for each valid i, vertices from the i-th set belong to the i-th subgraph.
Then, Chef checks all the edges in the graph. For an edge connecting vertices u and v, if u and v are both in the i-th set, 
then this edge belongs to the i-th subgraph. Otherwise, this edge does not belong to any of these K subgraphs.

At the end, Chef checks these K subgraphs. If each subgraph contains an even number of edges,
then Chef thinks that this way of dividing the graph is delicious.

Chef wants to divide the graph in a delicious way such that K is the smallest possible.
Find the minimum K and one such way to divide the graph.

Example Input
1
5 5
1 2
1 3
2 3
2 4
3 4

Example Output
2
1 2 1 1 2

Explanation
     Example case 1: Subgraph 1 contains vertices 1, 3, 4 and edges (1,3) and (3,4).
                     Subgraph 2 contains vertices 2 and 5, but no edges.
                     
 */

//Code:

#include <iostream>
#include<bits/stdc++.h>
using namespace std;
int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
	long long t,n,q,i,j,k,it;
	cin>>t;
	while(t--)
	{
	    cin>>n>>q;
	    k=q;
	    long long a[n+1]={0},check[q+1][2]={0},ans[n+1]={0},m=0;
	    /* for(i=1;i<=n;i++)
	        {
	            cout<<ans[i]<<" ";
	        }
	        cout<<endl;*/
	   for(it=1;it<=q;it++)
	   {
	        cin>>i>>j;
	        check[it][0]=i;
	        check[it][1]=j;
	        a[i]++;
	        ans[i]=1;
	        a[j]++;
	        ans[j]=1;
	    }
	   /*  for(i=1;i<=n;i++)
	        {
	            cout<<a[i]<<" ";
	        }
	        cout<<endl;*/
	    if(k%2==0)
	    {
	        cout<<"1\n";
	        for(i=1;i<=n;i++)
	        {
	            cout<<"1 ";
	        }
	        cout<<endl;
	    }
	    else
	    {
	        int flag=0,fg;
	        for(i=1;i<=n;i++)
	        {
	            if(a[i]%2!=0)
	            {
	                flag=1;
	                break;
	            }
	        }
	        if(flag==0)
	        {
	            k=3;
	            for(i=1;i<=n;i++)
	            {
	                if(a[i]!=0)
	                {
	                    m=i;
	                    break;
	                }
	            }
	            ans[i]=3;
	            for(i=1;i<=q;i++)
	            {
	                if(check[i][0]==m)
	                {
	                    a[check[i][1]]--;
	                }
	                else if(check[i][1]==m)
	                {
	                    a[check[i][0]]--;
	                }
	            }
	            fg=0;
	            for(i=1;i<=n;i++)
	            {
	                if(a[i]%2!=0&&i!=m&&fg==0)
	            {
	                //cout<<"even\n";
	                fg=1;
	                ans[i]=2;
	            } 
	            else if(i!=m)
	            {
	                ans[i]=1;
	            }
	            }
	        }
	        else
	        {
	            
	        flag=0;
	        k=1;
	        for(i=1;i<=n;i++)
	        {
	            if(a[i]%2!=0&&flag==0)
	            {
	                //cout<<"odd\n";
	                flag=1;
	                k=2;
	                ans[i]=2;
	            }
	            else
	            {
	                ans[i]=1;
	            }
	        }
	        }
	        cout<<k<<endl;
	        for(i=1;i<=n;i++)
	        {
	            cout<<ans[i]<<" ";
	        }
	        cout<<endl;
	    }
	}
	return 0;
}
